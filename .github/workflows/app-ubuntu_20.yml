name: Release App (Legacy Linux Compat)

on:
  workflow_dispatch:
    inputs:
      tag:
        description: '已存在的 Release 标签（例如 app-v1.2.3）。留空则根据版本文件生成 app-v<version>'
        required: false
        type: string
      version:
        description: '可选：显式指定版本号（当 tag 留空时使用），例如 1.2.3'
        required: false
        type: string

permissions:
  contents: read

jobs:
  resolve-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.resolve.outputs.release_id }}
      release_tag: ${{ steps.resolve.outputs.release_tag }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          repository: 1395173231/EasyChat
          token: ${{ secrets.PH_PTA }}

      - name: Determine tag
        id: det
        shell: bash
        run: |
          if [ -n "${{ github.event.inputs.tag }}" ]; then
            TAG="${{ github.event.inputs.tag }}"
          elif [ -n "${{ github.event.inputs.version }}" ]; then
            TAG="app-v${{ github.event.inputs.version }}"
          else
            VERSION=$(node -p "require('./src-tauri/tauri.conf.json').version")
            TAG="app-v${VERSION}"
          fi
          echo "TAG=$TAG" >> $GITHUB_OUTPUT

      - name: Get existing release by tag (must exist)
        id: resolve
        uses: actions/github-script@v6
        with:
          script: |
            const tag = `${{ steps.det.outputs.TAG }}`
            try {
              const { data } = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag
              })
              core.info(`Found release for tag ${tag} (id=${data.id})`)
              core.setOutput('release_id', String(data.id))
              core.setOutput('release_tag', tag)
            } catch (error) {
              if (error.status === 404) {
                core.setFailed(`Release with tag "${tag}" not found. This workflow will NOT create tags or releases.`)
              } else {
                core.setFailed(`Failed to lookup release by tag: ${error.message}`)
              }
            }

  build-tauri-linux-compat:
    needs: resolve-release
    if: ${{ needs.resolve-release.outputs.release_id != '' }}
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    container:
      image: ubuntu:20.04
    steps:
      - name: Prepare base tools
        run: |
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get install -y --no-install-recommends \
            git ca-certificates curl xz-utils tar gzip unzip pkg-config build-essential \
            libssl-dev
          update-ca-certificates

      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          repository: 1395173231/EasyChat
          token: ${{ secrets.PH_PTA }}

      - name: Install Linux deps (Ubuntu 20.04)
        run: |
          export DEBIAN_FRONTEND=noninteractive
          apt-get update
          apt-get install -y --no-install-recommends \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libsoup2.4-dev \
            libjavascriptcoregtk-4.0-dev
          apt-get clean
          rm -rf /var/lib/apt/lists/*

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'

      # ✅ 显式安装 Yarn
      - name: Install Yarn
        run: |
          npm install -g yarn
          echo "YARN=$(which yarn)"
          yarn --version

      - name: Install Rust (stable)
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          echo "PATH=$HOME/.cargo/bin:$PATH" >> $GITHUB_ENV
          rustup target add x86_64-unknown-linux-gnu

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: linux-compat-x86_64-unknown-linux-gnu

      - name: Install frontend deps
        run: yarn install --frozen-lockfile

      - name: Build & Upload to existing release
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.PH_PTA }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        with:
          args: --target x86_64-unknown-linux-gnu
          releaseId: ${{ needs.resolve-release.outputs.release_id }}
